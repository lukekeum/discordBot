import Discord from 'discord.js';

import randomID from '../api/randomID';

const roundSettingRoom = [];

export const getReactionMakeGame = (roomNumber, reaction) => {
  const array = roundSettingRoom.filter((room) => room === roomNumber);
  if (array.length !== 1) {
    console.log('[ERROR] The Error Has Been Occured while getReaction');
    return;
  }
  if (reaction.emoji.name === 'üóëÔ∏è') {
    reaction.message.channel.delete(
      '[LOG] Player clicked Whaste Emoji to remove this channel',
    );
    // TODO: Delete data from database
    console.log(`[PASS] Room has been deleted [${roomNumber}]`);
    return;
  }
  console.log(`[PASS] Room has been setted [${roomNumber}]`);
  const index = roundSettingRoom.indexOf(roomNumber);
  roundSettingRoom.splice(index, 1);
  const exampleEmbed = new Discord.MessageEmbed()
    .setColor('#34EB3D')
    .setDescription(
      ':wave:  **ÏÑ±Í≥µ**\nÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞©ÏùÑ ÎßåÎì§ÏóàÏäµÎãàÎã§. Ïù¥Ï†ú ÌîåÎ†àÏù¥Ïñ¥Î•º Ï¥àÎåÄÌï† Ïàò ÏûàÏñ¥Ïöî\n- **!Î∞©Ï¥àÎåÄ @[ÌîåÎ†àÏù¥Ïñ¥Ïù¥Î¶Ñ]** ÌîåÎ†àÏù¥Ïñ¥Î•º Î∞©ÏúºÎ°ú Ï¥àÎåÄÌï©ÎãàÎã§ ( Î¥áÏÇ¨Ïö©Î∞©Ï†ÑÏö© )   ',
    );
  // TODO: Edit data from database
  reaction.message.delete();
  reaction.message.channel.send(exampleEmbed);
};

export default async function MakeGame(message, args) {
  if (args.length != 2) {
    const exampleEmbed = new Discord.MessageEmbed()
      .setColor('#bf3b3b')
      .setDescription(':loudspeaker: **ERROR**\nÏò¨Î∞îÎ•∏ Î™ÖÎ†πÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî');
    message.channel
      .send(exampleEmbed)
      .then((msg) => msg.delete({ timeout: 3000 }));
    return;
  }
  if (!(args[1] === 'Í≥µÍ∞ú' || args[1] === 'ÎπÑÍ≥µÍ∞ú')) {
    const exampleEmbed = new Discord.MessageEmbed()
      .setColor('#bf3b3b')
      .setDescription(':loudspeaker: **ERROR**\nÏò¨Î∞îÎ•∏ Î™ÖÎ†πÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî');
    message.channel
      .send(exampleEmbed)
      .then((msg) => msg.delete({ timeout: 3000 }));
    return;
  }
  const optionEmbed = new Discord.MessageEmbed()
    .setColor('#6e6e6e')
    .setDescription(
      `:gear: **Î∞©ÏÑ§Ï†ï**\n\n<@${message.author.id}>\n**ÎùºÏö¥ÎìúÏàò**\n- **1.** 3ÎùºÏö¥Îìú   \n- **2. ** 4ÎùºÏö¥Îìú   \n- **3. ** 5ÎùºÏö¥Îìú   \n\nÏù¥ Î©îÏãúÏßÄÎäî 30Ï¥àÌõÑÏóê ÏÇ¨ÎùºÏßëÎãàÎã§   `,
    );
  const guild = message.guild;
  const roomNumber = randomID(5);
  await guild.roles
    .create({
      data: {
        name: `Player-${roomNumber}`,
        mentionable: false,
      },
    })
    .then((role) => {
      message.member.roles.add(role);
    })
    .catch((err) => console.error(err));
  await guild.roles
    .create({
      data: {
        name: `HeadGamer-${roomNumber}`,
        mentionable: false,
      },
    })
    .then((role) => {
      console.log(`[LOG] ${message.author.id} joined room ${roomNumber}`);
      message.member.roles.add(role);
    })
    .catch((err) => console.error(err));
  const role = message.guild.roles.cache.filter(
    (role) => role.name === `Player-${roomNumber}`,
  );
  await guild.channels.create(`${args[0]}`, {
    type: 'text',
    topic: `Î∞©Î≤àÌò∏: ${roomNumber}`,
    parent: `715792584764817468`,
    permissionOverrites: [
      {
        allow: 'VIEW_CHANNEL',
        id: role.id,
      },
      {
        deny: 'VIEW_CHANNEL',
        id: message.guild.roles.everyone.id,
      },
    ],
  });
  const channel = guild.channels.cache.find(
    (ch) => ch.topic === `Î∞©Î≤àÌò∏: ${roomNumber}`,
  );
  if (args[1] === 'Í≥µÍ∞ú') {
    const roomCreated = new Discord.MessageEmbed()
      .setColor('#34EB3D')
      .setDescription(
        `:white_check_mark: **ÏÑ±Í≥µ**\n<#${channel.id}> ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï±ÑÎÑêÏù¥ ÎßåÎì§Ïñ¥Ï°åÏäµÎãàÎã§`,
      );
    message.channel
      .send(roomCreated)
      .then((msg) => msg.delete({ timeout: 3000 }));
  }
  channel.send(optionEmbed).then(async (msg) => {
    try {
      await msg.react('1Ô∏è‚É£');
      await msg.react('2Ô∏è‚É£');
      await msg.react('3Ô∏è‚É£');
      await msg.react('üóëÔ∏è');
    } catch (err) {
      console.error(err);
    }
  });
  // TODO: Make data which is from database
  roundSettingRoom.push(roomNumber);
}
